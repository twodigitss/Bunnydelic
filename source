#!/usr/bin/env python
import os, platform, random, socket, sys, subprocess
sys.path.append(f"{os.path.expanduser('~')}/.config/bunnydelic/"); from config import *

''' /////////////// STYLES ////////////// '''

asciiisdefault=True;  #was the default_ascii replaced?
phraseToLeft=False if show_phrase is False else phraseToLeft
end = "\033[0m"; bold= "\033[1m"; c1=""; c2="";c3="";c4=""
line= "\033[4m"; ital= "\033[3m"; f1=""; f2="";f3="";f4=""

phrStyle=phrasestyles={ #phrase formatting style
	"normal":end, "italic":ital, "bold":bold, "underline":line
	}.get(phraseStyle)

colStyle=styles={ #colored information style
	"normal":"", "italic":ital, "bold":bold, "underline":line
	}.get(prefixStyle)

infoStyle=styles={ #information formatting style
	"normal":end, "italic":ital, "bold":bold, "underline":line
	}.get(informationStyle)

colorkeywords={ #used to read vars from config file
    "red":"red", "blue":"ble", "green":"grn", "yellow":"ylw", 
    "purple":"prp", "cyan":"cyn", "white":"wht", "black":"blk"
}
fg={ #normal foreground colors
    "red":  "\033[0;31m",   "grn":  "\033[0;32m",   
    "ylw":  "\033[0;33m",   "ble":  "\033[0;34m",
    "prp":  "\033[0;35m",   "cyn":  "\033[0;36m",
    "wht":  "\033[0;37m",   "blk":  "\033[0;30m",   
}
bg={ #normal background colors that paints a two-spaced square
    "red":"\033[0;41m  \033[0m", "grn":"\033[0;42m  \033[0m",
    "ylw":"\033[0;43m  \033[0m", "ble":"\033[0;44m  \033[0m",
    "prp":"\033[0;45m  \033[0m", "cyn":"\033[0;46m  \033[0m",
    "wht":"\033[0;47m  \033[0m", "blk":"\033[0;40m  \033[0m",
}
faces={ #feel freee to add more if you want
    "a1":"- -", "a2":"-_-", "a3":"-u-", "a4":"-o-", "a5":"-w-", "a6":"-.-", "a7":"-v-", "a8":"-~-",
    "b1":"'-'", "b2":"'·'", "b3":"'u'", "b4":"'o'", "b5":"'w'", "b6":"'.'", "b7":"'^'", "b8":"'~'",
    "c1":"O-o", "c2":"O_o", "c3":"OuO", "c4":"O O", "c5":"OwO", "c6":"O.o", "c7":"O^o", "c8":"O~o",
    "d1":"U-u", "d2":"U_u", "d3":"U U", "d4":"Uou", "d5":"Uwu", "d6":"U.u", "d7":"U^u", "d8":"U~u",
    "e1":">-<", "e2":">_<", "e3":">u<", "e4":">o<", "e5":">w<", "e6":">.<", "e7":">^<", "e8":">~<",
    "f1":"T-T", "f2":"T_T", "f3":"TuT", "f4":"ToT", "f5":"TwT", "f6":"T.T", "f7":"T^T", "f8":"T~T",
    "g1":"7-7", "g2":"7_7", "g3":"7u7", "g4":"7o7", "g5":"7w7", "g6":"7.7", "g7":"7^7", "g8":"7~7",
    "h1":"^-^", "h2":"^_^", "h3":"^u^", "h4":"^o^", "h5":"^w^", "h6":"^.^", "h7":"^ ^", "h8":"^~^",
    "i1":"·-·", "i2":"·_·", "i3":"·u·", "i4":"·o·", "i5":"·w·", "i6":"·.·", "i7":"·^·", "i8":"·~·",
    
}
distros={ #Robotition suggested this, thank him :>
    "Arch Linux":"",        "Debian GNU/Linux":"",  "EndeavourOS":"",   "Manjaro Linux":"󱘊",     "Parrot":"",
    "Ubuntu":"",            "Pop!_OS":"",           "Fedora Linux":"󰣛",        "Crystal Linux":"",     "Zorin OS":"",
    "Kali GNU/Linux":"",    "Rocky Linux":"",       "Linux Mint":"󰣭",    "AlmaLinux":"",         "MX Linux":"",
    "Archcraft":"",         "ArchLabs":"",          "ArcoLinux":"",     "Artix Linux":"",       "BigLinux":"",
    "CentOS Linux":"",      "Devuan GNU/Linux":"",  "elementary OS":"", "Garuda Linux":"",      "Loc-os":"",
    "Parabola GNU/Linux-libre":"", "Hyperbola GNU/Linux-libre":"",
           
}

#Randomize and sort faces and colors
fg_list = list(fg.keys()); bgkey = list(bg.keys())
face_list = list(faces.keys()); random.shuffle(face_list)
if randomize_colors: random.shuffle(fg_list)
else: fg_list = [colorkeywords[color] for color in static_color_set]
#match bgkey with the order set in fg_list
bgkey = [bg_key for fg_key in fg_list for bg_key in bg if fg_key == bg_key]
bgblocks="".join([bg[bg_key] for fg_key in fg_list for bg_key in bg if fg_key == bg_key])

c1 = fg[fg_list[0]];  f1 = faces[face_list[0]]
c2 = fg[fg_list[1]];  f2 = faces[face_list[1]]
c3 = fg[fg_list[2]];  f3 = faces[face_list[2]]
c4 = fg[fg_list[3]];  f4 = faces[face_list[3]]

#default ascii art (do not touch pls)
default_ascii=f'''
(\\ /)    (\\ /)  
( {f1})   ( {f2}) 
c({c1}"{end})({c1}"{end})  c({c2}"{end})({c2}"{end})
                
(\\ /)    (\\ /)  
( {f3})   ( {f4}) 
c({c3}"{end})({c3}"{end})  c({c4}"{end})({c4}"{end})
'''

if show_ascii in ["custom"]: #if showascii=default: pass
    if custom_ascii: #if not customascii: pass
        newascii = custom_ascii.strip().split('\n')
        max_length = max(len(line) for line in newascii)
        newFormat=[line.ljust(max_length, ' ') for line in newascii]; #!!!
        if phraseToLeft is True: default_ascii = "\n" + '\n'.join(newFormat) + '\n'
        else: default_ascii = "" + '\n'.join(newFormat) + '\n'
        asciiisdefault=False

''' /////////////// FETCH ////////////// '''

# Array with each life of ascii art and a custom auto-adjustable spacer
ascii_lines= default_ascii.split('\n'); max_lines =  0
spacer=" " * max(len(line) for line in ascii_lines) if not asciiisdefault else " " * 16

# functions to fetch information
def get_user(): return os.getlogin()
def get_host(): return socket.gethostname()
def get_sh(): return os.environ.get('SHELL')
def get_kern(): return f"{platform.uname().release}"

def get_de(): 
    if os.environ.get('XDG_CURRENT_DESKTOP') is None: 
        return os.environ.get('XDG_SESSION_DESKTOP')
    else: return os.environ.get('XDG_CURRENT_DESKTOP')
    
def get_os(name):
    NAME="PRETTY_NAME" if name=="pretty_name" else "NAME"
    return subprocess.run(
        f"grep '^{NAME}=' /etc/os-release" "| awk -F '=' '{print $2}' | tr -d '\"'", 
        shell=True, capture_output=True, text=True).stdout.strip()

def get_cpu():
    return subprocess.run("lscpu | awk '/Model name/ {print $3, $4, $5, $6}'", 
    shell=True, capture_output=True, text=True).stdout.strip()

def get_ram():
    ram = subprocess.run("free -h | awk '/^Mem/ {print $3, $2}'", 
    shell=True, capture_output=True, text=True).stdout.strip()
    return ram.replace(' ', ' / ').replace('Mi', 'Mb').replace('Gi', 'Gb')

def get_hdw():
    return subprocess.run("cat /sys/class/dmi/id/product_name", 
    shell=True, capture_output=True, text=True).stdout.strip()

def get_gpu():
    return subprocess.run(
    "lspci | grep -iE 'VGA|3D|Display' | awk -F '[:[:space:]]+' '{print $6,$7,$8,$9,$10}'", 
    shell=True, capture_output=True, text=True).stdout.strip()

def get_upt(): 
    with open('/proc/uptime', 'r') as file:
        uptime_seconds = int(float(next(file).split()[0]))
        uptime_hours, uptime_minutes = divmod(uptime_seconds // 60, 60)
        return f"{uptime_hours} hours, {uptime_minutes} minutes"

def get_pkg():
    packages=[]
    if os.path.exists('/etc/pacman.conf'):
        pac=len(os.popen("pacman -Qq").readlines())
        packages.append(f"{pac} (pacman)")

    elif os.path.exists('/etc/apt/sources.list') or os.path.exists('/etc/apt'): 
       apt = subprocess.run(['dpkg', '-l'], capture_output=True, text=True)
       apt = len(apt.stdout.splitlines()) - 5; #substract header file
       packages.append(f"{apt} (apt)")

    elif os.path.exists('/etc/dnf/dnf.conf') or os.path.exists('/etc/yum'): 
       dnf = subprocess.run(['dnf', 'list', 'installed'], capture_output=True, text=True)
       dnf = len(dnf.stdout.splitlines()) - 1; #substract header file
       packages.append(f"{dnf} (dnf)")

    flatpak = int(subprocess.run("flatpak list --app --columns=application | wc -l", 
    shell=True, capture_output=True, text=True).stdout.strip()); #flatpak=112
    if flatpak!=0: packages.append(f"{flatpak} (flatpak)")

    return "".join([i+", " if (i!=0 and i!=packages[-1]) else i for i in packages])

#this part of the code was repeated and honestly looks kinda intimidating
def assign_colorblocks():
    global fg_column, info_column
    if color_block_position =="left":
        if not show_phrase:
            if i < len(bgkey): fg_column=f"{bg[bgkey[i]]} {fg[fg_list[i]]}"  
            else: fg_column=f'{bg["wht"]} {fg["wht"]}'
        else: #if show_phrase is True
            if i < len(bgkey)+1: fg_column=f"{bg[bgkey[i-1]]} {fg[fg_list[i-1]]}"  
            else: fg_column=f'{bg["wht"]} {fg["wht"]}'
            
    elif color_block_position in ("bottom","off"):
        if not show_phrase: 
            if i < len(bgkey): fg_column=f"{fg[fg_list[i]]}" 
            else: fg_column=f'{end}'
        else: #if show_phrase is True
            if i < len(bgkey)+1: fg_column=f"{fg[fg_list[i-1]]}" 
            else: fg_column=f'{end}'
            
    else: fg_column=""

if override_distro_icon is True: #else pass
    your_distro=get_os("name")
    for item in distros:
        if item==your_distro: icons[0]=distros[item]

#this is a LIST of every line to print
info_lines=f'''{phrStyle}{somephrases[random.randint(0,len(somephrases)-1)]}{end}
{icons[0 ]}  {colStyle}Distro:{end}   {infoStyle}{get_os("name")}{end}
{icons[1 ]}  {colStyle}Owner:{end}    {infoStyle}{get_host()} {get_user()}{end}
{icons[2 ]}  {colStyle}Kernel:{end}   {infoStyle}{get_kern()}{end}
{icons[3 ]}  {colStyle}Desk:{end}     {infoStyle}{get_de()}{end}
{icons[4 ]}  {colStyle}Pkgs:{end}     {infoStyle}{get_pkg()}{end}
{icons[5 ]}  {colStyle}Shell:{end}    {infoStyle}{get_sh()}{end}
{icons[6 ]}  {colStyle}Uptime:{end}   {infoStyle}{get_upt()}{end}
{icons[7 ]}  {colStyle}Ram:{end}      {infoStyle}{get_ram()}{end}
{icons[8 ]}  {colStyle}Cpu:{end}      {infoStyle}{get_cpu()}{end}
{icons[9 ]}  {colStyle}Device:{end}   {infoStyle}{get_hdw()}{end}
{icons[10]}  {colStyle}Graphs:{end}   {infoStyle}{get_gpu()}{end}
{icons[11]}  {colStyle}User:{end}     {infoStyle}{get_user()}{end}
{icons[12]}  {colStyle}Host:{end}     {infoStyle}{get_host()}{end}
'''.split('\n')

dictOfLines={
    "distro":info_lines[1], "owner":info_lines[2],  "kernel":info_lines[3], 
    "de":info_lines[4],     "pkg":info_lines[5],    "shell":info_lines[6],      
    "uptime":info_lines[7], "ram": info_lines[8],   "cpu":info_lines[9],    
    "gpu": info_lines[11],  "user": info_lines[12], "host": info_lines[13],  
    "model":info_lines[10],
}

#MAIN METHOD
if __name__=="__main__":
    #Sort the information as "display" variable
    info_lines=info_lines[:1]; #exclude the first line
    for item in display:
        if item in dictOfLines: info_lines.append(dictOfLines[item.lower()])

    #if show_icon is false, removes the first 3 chars of every str 
    if show_icons is False: 
        for i in range(1, len(info_lines)): 
            info_lines[i] = info_lines[i][3:]
        
    if color_block_position == "bottom":
        info_lines=info_lines+[f"{end}"]+[f"{bgblocks}{end}"]

    # what to show if ascii is removed
    if show_ascii == "off":
        #removes the first line, which is the phrase
        info_lines=info_lines[1:] if not show_phrase else info_lines
        max_lines = len(info_lines)+1
        #Starts to process every line
        for i in range(max_lines):
            info_column = info_lines[i]  if i < len(info_lines)  else ''
            #big ass function code i repeated
            assign_colorblocks()

            #this thing does the general processing of every line, the rest was just the color blocks
            if i==0: print(f"{fg_column}{info_column}" if not show_phrase else f"{info_column}")
            else: 
                if not info_column:
                    if   color_block_position in ("left","off"): print(f"")
                    elif color_block_position == "bottom": print(f"{fg_column}{info_column}")
                else: print(f"{fg_column}{info_column}")
    
    # show whatever ascii if no set "off"
    else:
        if show_phrase is False:
            info_lines = info_lines[1:]
            ascii_lines= ascii_lines[1:] if asciiisdefault else ascii_lines
        max_lines = len(ascii_lines) if len(ascii_lines) > len(info_lines) else len(info_lines)+1

        for i in range(max_lines):
            ascii_column  = ascii_lines[i] if i < len(ascii_lines) else spacer
            info_column = info_lines[i]  if i < len(info_lines)  else ''
            #big ass function code i repeated
            assign_colorblocks()
            
            #DO NO forget that this instruction is for printing only the phrase
            if i==0:
                if show_phrase:
                    if asciiisdefault or phraseToLeft: print(f"{ascii_column}{info_column}")
                    else: print(f"{ascii_column}   {info_column}")
                else: print(f"{ascii_column}   {fg_column}{info_column}")
            
            #From here prints the body
            else:
                #if ascii_col stills has something to print
                if ascii_column:
                    if not info_column: #if info_column ended printing
                        if color_block_position in ("left","off"): 
                            print(f"{ascii_column}")
                        elif color_block_position == "bottom": 
                            print(f"{ascii_column}   {fg_column}{info_column}")
                    
                    else: # info_col has more information still
                        print(f"{ascii_column}   {fg_column}{info_column}");# si no hay info el fg si se imprime

                #ascii_col ended printing
                else: 
                    if info_column: print(f"{spacer}   {fg_column}{info_column}")
                    else:
                        if color_block_position in ("left","off"): print(f"{spacer}   ")
                        elif color_block_position == "bottom": print(f"{end}")